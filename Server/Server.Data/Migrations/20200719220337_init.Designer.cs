// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

namespace Server.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200719220337_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Server.Models.Armies.Army", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GameId");

                    b.Property<bool>("IsNPC");

                    b.Property<int>("Team");

                    b.Property<int?>("UserId");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Armies");
                });

            modelBuilder.Entity("Server.Models.Heroes.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArmyId");

                    b.Property<int>("Level");

                    b.Property<int>("Quantity");

                    b.Property<int>("StartX");

                    b.Property<int>("StartY");

                    b.Property<int>("Team");

                    b.Property<int>("Type");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.HasIndex("ArmyId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Server.Models.Heroes.Units.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DamageAmount");

                    b.Property<int>("HealingAmount");

                    b.Property<bool>("IsHeroAbility");

                    b.Property<int>("Levels");

                    b.Property<int>("Name");

                    b.HasKey("Id");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("Server.Models.Heroes.Units.UnitConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionPointsBase");

                    b.Property<int>("ArmorBase");

                    b.Property<int>("ArmorIncrement");

                    b.Property<int>("ArmorType");

                    b.Property<int>("AttackType");

                    b.Property<int>("BuildTime");

                    b.Property<int>("EvasionBase");

                    b.Property<int>("Faction");

                    b.Property<int>("FoodCost");

                    b.Property<int>("GemsCost");

                    b.Property<int>("GoldCost");

                    b.Property<int>("HitpointsBase");

                    b.Property<int>("HitpointsIncrement");

                    b.Property<int>("ManaBase");

                    b.Property<int>("ManaIncrement");

                    b.Property<int>("MaxDamageBase");

                    b.Property<int>("MaxDamageIncrement");

                    b.Property<int>("MinDamageBase");

                    b.Property<int>("MinDamageIncrement");

                    b.Property<int>("MovementPointsBase");

                    b.Property<int>("OreCost");

                    b.Property<int>("Type");

                    b.Property<int>("WoodCost");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("UnitConfigurations");
                });

            modelBuilder.Entity("Server.Models.Heroes.Units.UnitConfigurationAbility", b =>
                {
                    b.Property<int>("UnitConfigurationId");

                    b.Property<int>("AbilityId");

                    b.HasKey("UnitConfigurationId", "AbilityId");

                    b.HasIndex("AbilityId");

                    b.ToTable("UnitConfigurationAbility");
                });

            modelBuilder.Entity("Server.Models.Heroes.Units.UnitConfigurationUpgrade", b =>
                {
                    b.Property<int>("UnitConfigurationId");

                    b.Property<int>("UpgradeId");

                    b.HasKey("UnitConfigurationId", "UpgradeId");

                    b.HasIndex("UpgradeId");

                    b.ToTable("UnitConfigurationUpgrade");
                });

            modelBuilder.Entity("Server.Models.Heroes.Units.Upgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GoldCost");

                    b.Property<int>("Name");

                    b.Property<int>("TimeCost");

                    b.Property<int>("WoodCost");

                    b.HasKey("Id");

                    b.ToTable("Upgrades");
                });

            modelBuilder.Entity("Server.Models.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlueprintId");

                    b.Property<int?>("HeroId");

                    b.Property<int?>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("BlueprintId");

                    b.HasIndex("UnitId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Server.Models.Items.ItemBlueprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("ItemSlotType");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ItemBlueprints");
                });

            modelBuilder.Entity("Server.Models.MapEntities.Dwelling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EndX");

                    b.Property<int>("EndY");

                    b.Property<int>("GameId");

                    b.Property<int?>("GuardianId");

                    b.Property<string>("OccupiedTilesString");

                    b.Property<int>("Team");

                    b.Property<int>("Type");

                    b.Property<int?>("UserId");

                    b.Property<string>("VisitorsString");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GuardianId");

                    b.HasIndex("UserId");

                    b.ToTable("Dwelling");
                });

            modelBuilder.Entity("Server.Models.MapEntities.Treasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GameId");

                    b.Property<int>("Quantity");

                    b.Property<int>("Team");

                    b.Property<int>("Type");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Treasure");
                });

            modelBuilder.Entity("Server.Models.Realms.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MatrixString");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Server.Models.Realms.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EdgeTilesString");

                    b.Property<int?>("GameId");

                    b.Property<bool>("IsAccessibleFromMainRoom");

                    b.Property<bool>("IsMainRoom");

                    b.Property<int>("RoomSize");

                    b.Property<string>("TilesString");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Server.Models.Users.Friendship", b =>
                {
                    b.Property<int>("SenderId");

                    b.Property<int>("RecieverId");

                    b.Property<DateTime?>("BecameFriendsTime");

                    b.Property<DateTime?>("RequestTime");

                    b.Property<int>("State");

                    b.HasKey("SenderId", "RecieverId");

                    b.HasIndex("RecieverId");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("Server.Models.Users.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime?>("DateRead");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime>("MessageSent");

                    b.Property<bool>("RecipientDeleted");

                    b.Property<int?>("RecipientId");

                    b.Property<bool>("SenderDeleted");

                    b.Property<int?>("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Server.Models.Users.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<bool>("IsMain");

                    b.Property<string>("PublicId");

                    b.Property<string>("Url");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Server.Models.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Server.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("ActiveConnection");

                    b.Property<Guid?>("BattleId");

                    b.Property<string>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<int>("CurrentRealmId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Discriminator");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int?>("GameId");

                    b.Property<string>("Gender");

                    b.Property<string>("Interests");

                    b.Property<DateTime>("LastActive");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int>("MMR");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<byte>("OnlineStatus");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Server.Models.Users.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Server.Models.Users.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Server.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Server.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Server.Models.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.Models.Armies.Army", b =>
                {
                    b.HasOne("Server.Models.Realms.Game", "Game")
                        .WithMany("Armies")
                        .HasForeignKey("GameId");

                    b.HasOne("Server.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.OwnsOne("Server.Models.MapEntities.NPCData", "NPCData", b1 =>
                        {
                            b1.Property<int>("ArmyId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("Disposition");

                            b1.Property<int?>("ItemRewardId");

                            b1.Property<int>("MapRepresentation");

                            b1.Property<string>("OccupiedTilesString");

                            b1.Property<int>("RewardQuantity");

                            b1.Property<int>("RewardType");

                            b1.Property<int>("TroopsRewardQuantity");

                            b1.Property<int>("TroopsRewardType");

                            b1.HasKey("ArmyId");

                            b1.HasIndex("ItemRewardId");

                            b1.ToTable("Armies");

                            b1.HasOne("Server.Models.Armies.Army")
                                .WithOne("NPCData")
                                .HasForeignKey("Server.Models.MapEntities.NPCData", "ArmyId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasOne("Server.Models.Items.ItemBlueprint", "ItemReward")
                                .WithMany()
                                .HasForeignKey("ItemRewardId");
                        });
                });

            modelBuilder.Entity("Server.Models.Heroes.Unit", b =>
                {
                    b.HasOne("Server.Models.Armies.Army", "Army")
                        .WithMany("Units")
                        .HasForeignKey("ArmyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.Models.Heroes.Units.UnitConfigurationAbility", b =>
                {
                    b.HasOne("Server.Models.Heroes.Units.Ability", "Ability")
                        .WithMany("UnitConfigurationAbilitys")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.Models.Heroes.Units.UnitConfiguration", "UnitConfiguration")
                        .WithMany("UnitConfigurationAbilitys")
                        .HasForeignKey("UnitConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.Models.Heroes.Units.UnitConfigurationUpgrade", b =>
                {
                    b.HasOne("Server.Models.Heroes.Units.UnitConfiguration", "UnitConfiguration")
                        .WithMany("UnitConfigurationUpgrades")
                        .HasForeignKey("UnitConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.Models.Heroes.Units.Upgrade", "Upgrade")
                        .WithMany("UnitConfigurationUpgrades")
                        .HasForeignKey("UpgradeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.Models.Items.Item", b =>
                {
                    b.HasOne("Server.Models.Items.ItemBlueprint", "Blueprint")
                        .WithMany()
                        .HasForeignKey("BlueprintId");

                    b.HasOne("Server.Models.Heroes.Unit", "Unit")
                        .WithMany("Items")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.Models.MapEntities.Dwelling", b =>
                {
                    b.HasOne("Server.Models.Realms.Game", "Game")
                        .WithMany("Dwellings")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.Models.Armies.Army", "Guardian")
                        .WithMany()
                        .HasForeignKey("GuardianId");

                    b.HasOne("Server.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Server.Models.MapEntities.Treasure", b =>
                {
                    b.HasOne("Server.Models.Realms.Game")
                        .WithMany("Treasures")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("Server.Models.Realms.Room", b =>
                {
                    b.HasOne("Server.Models.Realms.Game")
                        .WithMany("Rooms")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("Server.Models.Users.Friendship", b =>
                {
                    b.HasOne("Server.Models.Users.User", "Reciever")
                        .WithMany("RecievedFriendRequests")
                        .HasForeignKey("RecieverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.Models.Users.User", "Sender")
                        .WithMany("SendFriendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Server.Models.Users.Message", b =>
                {
                    b.HasOne("Server.Models.Users.User", "Recipient")
                        .WithMany("MessagesRecieved")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Server.Models.Users.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Server.Models.Users.Photo", b =>
                {
                    b.HasOne("Server.Models.Users.User", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Server.Models.Users.User", b =>
                {
                    b.HasOne("Server.Models.Realms.Game", "Game")
                        .WithMany("Users")
                        .HasForeignKey("GameId");

                    b.OwnsOne("Server.Models.Users.Avatar", "Avatar", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("Gems");

                            b1.Property<int>("Gold");

                            b1.Property<int>("Ore");

                            b1.Property<int>("Team");

                            b1.Property<string>("VisitedString");

                            b1.Property<int>("Wood");

                            b1.HasKey("UserId");

                            b1.ToTable("AspNetUsers");

                            b1.HasOne("Server.Models.Users.User")
                                .WithOne("Avatar")
                                .HasForeignKey("Server.Models.Users.Avatar", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Server.Models.Users.UserRole", b =>
                {
                    b.HasOne("Server.Models.Users.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.Models.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
